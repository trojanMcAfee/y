"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[36286],{69181:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Discord/development/dev-contributors/chat_2024-11-22","title":"dev-contributors 2024-11-22","description":"Summary","source":"@site/community/Discord/development/dev-contributors/chat_2024-11-22.md","sourceDirName":"Discord/development/dev-contributors","slug":"/Discord/development/dev-contributors/chat_2024-11-22","permalink":"/eliza/community/Discord/development/dev-contributors/chat_2024-11-22","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"dev-contributors 2024-11-21","permalink":"/eliza/community/Discord/development/dev-contributors/chat_2024-11-21"},"next":{"title":"dev-contributors 2024-11-23","permalink":"/eliza/community/Discord/development/dev-contributors/chat_2024-11-23"}}');var s=i(62540),r=i(43023);const o={},l="dev-contributors 2024-11-22",c={},d=[{value:"Summary",id:"summary",level:2},{value:"FAQ",id:"faq",level:2},{value:"Who Helped Who",id:"who-helped-who",level:2},{value:"Action Items",id:"action-items",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dev-contributors-2024-11-22",children:"dev-contributors 2024-11-22"})}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"In the recent discussions, Odilitime proposed adding more API endpoints to the client-direct since it already uses port 3000 with CORS enabled in Express server; Jin suggested a non-web accounting framework for bot users to set spend limits on inference and mentioned useful tools he made. They also discussed automating TypeScript comments for better API documentation, considering the repository's size and need for structural coverage through examples. Loaf recommended building out React interfaces directly in the client with runtime running there too. RS1 shared a shell script to provide codebase context, while Jin pointed out temporary issues with Gemini Pro but remained optimistic about future improvements by 2025. Yikesawjeez asked Shannon Code for details on Eliza's capabilities regarding posting videos and handling NFT transactions across different chains."}),"\n",(0,s.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"How can we improve the handling communication between React client and runtime?"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Jin: Adding more API endpoints in the client-side since it already uses port 3000 with CORS enabled express server makes sense. This approach allows for better control over data exchange and reduces dependency on backend services."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Is there a need for an internal non-web accounting framework within the bot?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Odilitime: Yes, having a non-web accounting framework would allow users to set spend limits for inference without relying solely on web client interactions. The web client can still tap into this framework as needed."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"What tools are available for automating TypeScript comments and documentation pipelines?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Jin: There is an existing tool called ",(0,s.jsx)(n.code,{children:"issues_prs"})," that helps with fetching issues and pull requests, which could be useful in creating a more comprehensive documentation pipeline. Additionally, exploring other tools like code2prompt might provide further insights into automating TypeScript comments for API docs."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"How can we improve the onboarding process to cover the structure of our large repository?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Jin: Focusing on providing examples and demonstrations of how different pieces are being used within the project would be more important than covering every aspect in detail. This approach helps new contributors understand the overall architecture without overwhelming them with information."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Can Eliza post videos to Twitter, move NFTs, and perform transactions on multiple chains?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Odilitime: As of now, there is no evidence that Eliza can post videos to Twitter or interact with wallets for sending transactions and reading balances. However, these features might be added in the future as development progresses."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"who-helped-who",children:"Who Helped Who"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Odilitime helped Jin with setting up a non-web accounting framework by suggesting an internal bot feature for users to set spend limits."}),"\n",(0,s.jsx)(n.li,{children:"Jin provided resources and tools useful for documentation pipelines, including links to GitHub repositories and markdown files that automate TypeScript comments for API docs."}),"\n",(0,s.jsx)(n.li,{children:"Loaf contributed to the discussion on building out React interfaces and suggested using a direct client as the interface with runtime running in the client."}),"\n",(0,s.jsx)(n.li,{children:"RS1 offered assistance by sharing a shell script for codebase context, which helps filter specific files needed for understanding the project structure better."}),"\n",(0,s.jsx)(n.li,{children:'Jin mentioned their use of "code2prompt" tool, indicating its effectiveness and temporary nature until bigger context windows are available in 2025.'}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"action-items",children:"Action Items"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Technical Tasks"}),"\n",(0,s.jsx)(n.li,{children:"Implement a non-web accounting framework internal to the bot (mentioned by Odilitime)"}),"\n",(0,s.jsx)(n.li,{children:"Automate TypeScript comments for API documentation (requested by jin)"}),"\n",(0,s.jsx)(n.li,{children:"Develop tools useful for understanding codebase context, such as filtering certain files in shell scripts (discussed by rs1 and jin)"}),"\n",(0,s.jsxs)(n.li,{children:["Documentation Needs","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cover the structure of the repository more importantly with examples and usage details (requested by jin)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Feature Requests","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use direct client interface for running runtime, possibly pushing to have the runtime in the client as well (suggested by loaf)"}),"\n",(0,s.jsx)(n.li,{children:"Explore bigger context windows for better understanding of files, potentially using Gemini Pro despite its current issues with Google's UX (discussed by jin and rs1)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Community Tasks","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Contribute to @neuraleth on GitHub masquerade feature inquiry (mentioned by yikesawjeez)"}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},43023:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(63696);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);