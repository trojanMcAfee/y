"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[25006],{37152:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"core/providers","title":"\ud83d\udd0c Providers","description":"Providers are core modules that inject dynamic context and real-time information into agent interactions. They serve as a bridge between the agent and various external systems, enabling access to market data, wallet information, sentiment analysis, and temporal context.","source":"@site/docs/core/providers.md","sourceDirName":"core","slug":"/core/providers","permalink":"/eliza/docs/core/providers","draft":false,"unlisted":false,"editUrl":"https://github.com/ai16z/eliza/tree/main/docs/docs/core/providers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Agents","permalink":"/eliza/docs/core/agents"},"next":{"title":"Actions","permalink":"/eliza/docs/core/actions"}}');var s=r(62540),i=r(43023);const a={},o="\ud83d\udd0c Providers",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Core Structure",id:"core-structure",level:3},{value:"Built-in Providers",id:"built-in-providers",level:2},{value:"Time Provider",id:"time-provider",level:3},{value:"Facts Provider",id:"facts-provider",level:3},{value:"Boredom Provider",id:"boredom-provider",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Basic Provider Template",id:"basic-provider-template",level:3},{value:"Memory Integration",id:"memory-integration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Data Management",id:"1-data-management",level:3},{value:"2. Performance",id:"2-performance",level:3},{value:"3. Error Handling",id:"3-error-handling",level:3},{value:"4. Security",id:"4-security",level:3},{value:"Integration with Runtime",id:"integration-with-runtime",level:2},{value:"Example: Complete Provider",id:"example-complete-provider",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-providers",children:"\ud83d\udd0c Providers"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/api/interfaces/provider",children:"Providers"})," are core modules that inject dynamic context and real-time information into agent interactions. They serve as a bridge between the agent and various external systems, enabling access to market data, wallet information, sentiment analysis, and temporal context."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"A provider's primary purpose is to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Supply dynamic contextual information"}),"\n",(0,s.jsx)(n.li,{children:"Integrate with the agent runtime"}),"\n",(0,s.jsx)(n.li,{children:"Format information for conversation templates"}),"\n",(0,s.jsx)(n.li,{children:"Maintain consistent data access"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"core-structure",children:"Core Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Provider {\n  get: (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n  ) => Promise<string>;\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"built-in-providers",children:"Built-in Providers"}),"\n",(0,s.jsx)(n.h3,{id:"time-provider",children:"Time Provider"}),"\n",(0,s.jsx)(n.p,{children:"Provides temporal context for agent interactions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const timeProvider: Provider = {\n  get: async (_runtime: IAgentRuntime, _message: Memory) => {\n    const currentDate = new Date();\n    const currentTime = currentDate.toLocaleTimeString("en-US");\n    const currentYear = currentDate.getFullYear();\n    return `The current time is: ${currentTime}, ${currentYear}`;\n  },\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"facts-provider",children:"Facts Provider"}),"\n",(0,s.jsx)(n.p,{children:"From bootstrap plugin - maintains conversation facts:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const factsProvider: Provider = {\n  get: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n    // Create embedding for recent messages and retrieve relevant facts\n    const recentMessages = formatMessages({\n      messages: state?.recentMessagesData?.slice(-10),\n      actors: state?.actorsData,\n    });\n    const embedding = await embed(runtime, recentMessages);\n    const memoryManager = new MemoryManager({ runtime, tableName: "facts" });\n    const recentFactsData = await memoryManager.getMemories({\n      roomId: message.roomId,\n      count: 10,\n      agentId: runtime.agentId,\n    });\n\n    // Combine and format facts\n    const allFacts = [...recentFactsData]; // Deduplication can be skipped if no overlap\n    const formattedFacts = formatFacts(allFacts);\n\n    return `Key facts that ${runtime.character.name} knows:\\n${formattedFacts}`;\n  },\n};\n\nexport { factsProvider };\n'})}),"\n",(0,s.jsx)(n.h3,{id:"boredom-provider",children:"Boredom Provider"}),"\n",(0,s.jsx)(n.p,{children:"From bootstrap plugin - manages conversation dynamics and engagement by calculating the boredom level of an agent based on recent messages in a chat room."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Data Structures"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"boredomLevels"}),": An array of objects, each representing a boredom level with a minimum score and a set of status messages that reflect the agent's current engagement."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"interestWords"}),", ",(0,s.jsx)(n.strong,{children:"cringeWords"}),", and ",(0,s.jsx)(n.strong,{children:"negativeWords"}),": Arrays of words that influence the boredom score based on their presence in messages."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Boredom Calculation"}),":"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"boredomProvider"})," gets recent messages from the agent\u2019s conversation over the last 15 minutes."]}),"\n",(0,s.jsxs)(n.li,{children:["It calculates a ",(0,s.jsx)(n.strong,{children:"boredom score"})," by analyzing the text of these messages. The score is influenced by:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interest words"}),": Decrease boredom (subtract 1 point)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cringe words"}),": Increase boredom (add 1 point)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Negative words"}),": Increase boredom (add 1 point)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Exclamation marks"}),": Increase boredom (add 1 point)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Question marks"}),": Increase or decrease boredom depending on the sender."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Boredom Level"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The boredom score is matched to a level from the ",(0,s.jsx)(n.code,{children:"boredomLevels"})," array, which defines how engaged the agent feels."]}),"\n",(0,s.jsx)(n.li,{children:"A random status message from the selected boredom level is chosen and the agent\u2019s name is inserted into the message."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface BoredomLevel {\n  minScore: number;\n  statusMessages: string[];\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"The result is a message that reflects the agent's perceived level of engagement in the conversation, based on their recent interactions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const boredomProvider: Provider = {\n  get: async (runtime: IAgentRuntime, message: Memory) => {\n    const messages = await runtime.messageManager.getMemories({\n      roomId: message.roomId,\n      count: 10,\n    });\n\n    return messages.length > 0\n      ? "Actively engaged in conversation"\n      : "No recent interactions";\n  },\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"Features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Engagement tracking"}),"\n",(0,s.jsx)(n.li,{children:"Conversation flow management"}),"\n",(0,s.jsx)(n.li,{children:"Natural disengagement"}),"\n",(0,s.jsx)(n.li,{children:"Sentiment analysis"}),"\n",(0,s.jsx)(n.li,{children:"Response adaptation"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(n.h3,{id:"basic-provider-template",children:"Basic Provider Template"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Provider, IAgentRuntime, Memory, State } from "@ai16z/eliza";\n\nconst customProvider: Provider = {\n  get: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n    // Get relevant data using runtime services\n    const memories = await runtime.messageManager.getMemories({\n      roomId: message.roomId,\n      count: 5,\n    });\n\n    // Format and return context\n    return formatContextString(memories);\n  },\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"memory-integration",children:"Memory Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const memoryProvider: Provider = {\n  get: async (runtime: IAgentRuntime, message: Memory) => {\n    // Get recent messages\n    const messages = await runtime.messageManager.getMemories({\n      roomId: message.roomId,\n      count: 5,\n      unique: true,\n    });\n\n    // Get user descriptions\n    const descriptions = await runtime.descriptionManager.getMemories({\n      roomId: message.roomId,\n      userId: message.userId,\n    });\n\n    // Combine and format\n    return `\nRecent Activity:\n${formatMessages(messages)}\n\nUser Context:\n${formatDescriptions(descriptions)}\n    `.trim();\n  },\n};\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-data-management",children:"1. Data Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement robust caching strategies"}),"\n",(0,s.jsx)(n.li,{children:"Use appropriate TTL for different data types"}),"\n",(0,s.jsx)(n.li,{children:"Validate data before caching"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-performance",children:"2. Performance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Example of optimized data fetching\nasync function fetchDataWithCache<T>(\n  key: string,\n  fetcher: () => Promise<T>,\n): Promise<T> {\n  const cached = await cache.get(key);\n  if (cached) return cached;\n\n  const data = await fetcher();\n  await cache.set(key, data);\n  return data;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-error-handling",children:"3. Error Handling"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement retry mechanisms"}),"\n",(0,s.jsx)(n.li,{children:"Provide fallback values"}),"\n",(0,s.jsx)(n.li,{children:"Log errors comprehensively"}),"\n",(0,s.jsx)(n.li,{children:"Handle API timeouts"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-security",children:"4. Security"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Validate input parameters"}),"\n",(0,s.jsx)(n.li,{children:"Sanitize returned data"}),"\n",(0,s.jsx)(n.li,{children:"Implement rate limiting"}),"\n",(0,s.jsx)(n.li,{children:"Handle sensitive data appropriately"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-runtime",children:"Integration with Runtime"}),"\n",(0,s.jsxs)(n.p,{children:["Providers are registered with the ",(0,s.jsx)(n.a,{href:"/api/classes/AgentRuntime",children:"AgentRuntime"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Register provider\nruntime.registerContextProvider(customProvider);\n\n// Providers are accessed through composeState\nconst state = await runtime.composeState(message);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"example-complete-provider",children:"Example: Complete Provider"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Provider, IAgentRuntime, Memory, State } from "@ai16z/eliza";\n\nconst comprehensiveProvider: Provider = {\n  get: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n    try {\n      // Get recent messages\n      const messages = await runtime.messageManager.getMemories({\n        roomId: message.roomId,\n        count: 5,\n      });\n\n      // Get user context\n      const userContext = await runtime.descriptionManager.getMemories({\n        roomId: message.roomId,\n        userId: message.userId,\n      });\n\n      // Get relevant facts\n      const facts = await runtime.messageManager.getMemories({\n        roomId: message.roomId,\n        tableName: "facts",\n        count: 3,\n      });\n\n      // Format comprehensive context\n      return `\n# Conversation Context\n${messages.map((m) => `- ${m.content.text}`).join("\\n")}\n\n# User Information\n${userContext.map((c) => c.content.text).join("\\n")}\n\n# Related Facts\n${facts.map((f) => `- ${f.content.text}`).join("\\n")}\n      `.trim();\n    } catch (error) {\n      console.error("Provider error:", error);\n      return "Context temporarily unavailable";\n    }\n  },\n};\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Stale Data"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Implement cache invalidation\nconst invalidateCache = async (pattern: string) => {\n  const keys = await cache.keys(pattern);\n  await Promise.all(keys.map((k) => cache.del(k)));\n};\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Rate Limiting"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Implement backoff strategy\nconst backoff = async (attempt: number) => {\n  const delay = Math.min(1000 * Math.pow(2, attempt), 10000);\n  await new Promise((resolve) => setTimeout(resolve, delay));\n};\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"API Failures"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Implement fallback data sources\nconst getFallbackData = async () => {\n  // Attempt alternative data sources\n};\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/eliza/docs/core/agents",children:"Agent Runtime"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../../packages/core",children:"Memory System"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},43023:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(63696);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);