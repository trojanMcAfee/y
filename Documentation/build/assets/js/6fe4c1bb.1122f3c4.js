"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[66328],{65879:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"packages/agents","title":"\ud83e\udd16 Agent Package","description":"Overview","source":"@site/docs/packages/agents.md","sourceDirName":"packages","slug":"/packages/agents","permalink":"/eliza/docs/packages/agents","draft":false,"unlisted":false,"editUrl":"https://github.com/ai16z/eliza/tree/main/docs/docs/packages/agents.md","tags":[],"version":"current","frontMatter":{}}');var t=a(62540),i=a(43023);const s={},c="\ud83e\udd16 Agent Package",l={},o=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Core Components",id:"core-components",level:2},{value:"Agent Creation",id:"agent-creation",level:3},{value:"Character Loading",id:"character-loading",level:3},{value:"Client Initialization",id:"client-initialization",level:3},{value:"Database Management",id:"database-management",level:2},{value:"Token Management",id:"token-management",level:2},{value:"Agent Lifecycle Management",id:"agent-lifecycle-management",level:2},{value:"Starting Agents",id:"starting-agents",level:3},{value:"Shell Interface",id:"shell-interface",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Plugin Management",id:"plugin-management",level:3},{value:"Character Hot Reloading",id:"character-hot-reloading",level:3},{value:"Multi-Agent Coordination",id:"multi-agent-coordination",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Character Management",id:"character-management",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Resource Management",id:"resource-management",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Related Resources",id:"related-resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-agent-package",children:"\ud83e\udd16 Agent Package"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The Agent Package (",(0,t.jsx)(n.code,{children:"@eliza/agent"}),") provides the high-level orchestration layer for Eliza, managing agent lifecycles, character loading, client initialization, and runtime coordination."]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm add @eliza/agent\n"})}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { startAgents, loadCharacters } from "@eliza/agent";\n\n// Start agents with default or custom characters\nconst args = parseArguments();\nconst characters = await loadCharacters(args.characters);\n\n// Initialize agents\nawait startAgents();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,t.jsx)(n.h3,{id:"agent-creation",children:"Agent Creation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export async function createAgent(\n  character: Character,\n  db: IDatabaseAdapter,\n  token: string,\n): Promise<AgentRuntime> {\n  return new AgentRuntime({\n    databaseAdapter: db,\n    token,\n    modelProvider: character.modelProvider,\n    character,\n    plugins: [\n      bootstrapPlugin,\n      nodePlugin,\n      // Conditional plugins\n      character.settings.secrets.WALLET_PUBLIC_KEY ? solanaPlugin : null,\n    ].filter(Boolean),\n    providers: [],\n    actions: [],\n    services: [],\n    managers: [],\n  });\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"character-loading",children:"Character Loading"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'export async function loadCharacters(\n  charactersArg: string,\n): Promise<Character[]> {\n  // Parse character paths\n  let characterPaths = charactersArg\n    ?.split(",")\n    .map((path) => path.trim())\n    .map((path) => normalizePath(path));\n\n  const loadedCharacters = [];\n\n  // Load each character file\n  for (const path of characterPaths) {\n    try {\n      const character = JSON.parse(fs.readFileSync(path, "utf8"));\n\n      // Load plugins if specified\n      if (character.plugins) {\n        character.plugins = await loadPlugins(character.plugins);\n      }\n\n      loadedCharacters.push(character);\n    } catch (error) {\n      console.error(`Error loading character from ${path}: ${error}`);\n    }\n  }\n\n  // Fall back to default character if none loaded\n  if (loadedCharacters.length === 0) {\n    loadedCharacters.push(defaultCharacter);\n  }\n\n  return loadedCharacters;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"client-initialization",children:"Client Initialization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'export async function initializeClients(\n  character: Character,\n  runtime: IAgentRuntime,\n) {\n  const clients = [];\n  const clientTypes = character.clients?.map((str) => str.toLowerCase()) || [];\n\n  // Initialize requested clients\n  if (clientTypes.includes("discord")) {\n    clients.push(await DiscordClientInterface.start(runtime));\n  }\n\n  if (clientTypes.includes("telegram")) {\n    clients.push(await TelegramClientInterface.start(runtime));\n  }\n\n  if (clientTypes.includes("twitter")) {\n    clients.push(await TwitterClientInterface.start(runtime));\n  }\n\n  if (clientTypes.includes("auto")) {\n    clients.push(await AutoClientInterface.start(runtime));\n  }\n\n  return clients;\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"database-management",children:"Database Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'function initializeDatabase(): IDatabaseAdapter {\n  // Use PostgreSQL if URL provided\n  if (process.env.POSTGRES_URL) {\n    return new PostgresDatabaseAdapter({\n      connectionString: process.env.POSTGRES_URL,\n    });\n  }\n\n  // Fall back to SQLite\n  return new SqliteDatabaseAdapter(new Database("./db.sqlite"));\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"token-management",children:"Token Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export function getTokenForProvider(\n  provider: ModelProviderName,\n  character: Character,\n) {\n  switch (provider) {\n    case ModelProviderName.OPENAI:\n      return (\n        character.settings?.secrets?.OPENAI_API_KEY || settings.OPENAI_API_KEY\n      );\n\n    case ModelProviderName.ANTHROPIC:\n      return (\n        character.settings?.secrets?.ANTHROPIC_API_KEY ||\n        character.settings?.secrets?.CLAUDE_API_KEY ||\n        settings.ANTHROPIC_API_KEY\n      );\n\n    // Handle other providers...\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"agent-lifecycle-management",children:"Agent Lifecycle Management"}),"\n",(0,t.jsx)(n.h3,{id:"starting-agents",children:"Starting Agents"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async function startAgent(character: Character, directClient: any) {\n  try {\n    // Get provider token\n    const token = getTokenForProvider(character.modelProvider, character);\n\n    // Initialize database\n    const db = initializeDatabase();\n\n    // Create runtime\n    const runtime = await createAgent(character, db, token);\n\n    // Initialize clients\n    const clients = await initializeClients(character, runtime);\n\n    // Register with direct client\n    directClient.registerAgent(runtime);\n\n    return clients;\n  } catch (error) {\n    console.error(\n      `Error starting agent for character ${character.name}:`,\n      error,\n    );\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"shell-interface",children:"Shell Interface"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nasync function handleUserInput(input, agentId) {\n  if (input.toLowerCase() === "exit") {\n    rl.close();\n    return;\n  }\n\n  try {\n    const response = await fetch(\n      `http://localhost:${serverPort}/${agentId}/message`,\n      {\n        method: "POST",\n        headers: {\n          "Content-Type": "application/json",\n        },\n        body: JSON.stringify({\n          text: input,\n          userId: "user",\n          userName: "User",\n        }),\n      },\n    );\n\n    const data = await response.json();\n    data.forEach((message) => console.log(`Agent: ${message.text}`));\n  } catch (error) {\n    console.error("Error:", error);\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(n.h3,{id:"plugin-management",children:"Plugin Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async function loadPlugins(pluginPaths: string[]) {\n  return await Promise.all(\n    pluginPaths.map(async (plugin) => {\n      const importedPlugin = await import(plugin);\n      return importedPlugin;\n    }),\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"character-hot-reloading",children:"Character Hot Reloading"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function reloadCharacter(runtime: IAgentRuntime, characterPath: string) {\n  // Load new character\n  const character = JSON.parse(fs.readFileSync(characterPath, "utf8"));\n\n  // Update runtime\n  runtime.character = character;\n\n  // Reload plugins\n  if (character.plugins) {\n    const plugins = await loadPlugins(character.plugins);\n    runtime.registerPlugins(plugins);\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"multi-agent-coordination",children:"Multi-Agent Coordination"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class AgentCoordinator {\n  private agents: Map<string, IAgentRuntime>;\n\n  async broadcast(message: Memory) {\n    const responses = await Promise.all(\n      Array.from(this.agents.values()).map((agent) =>\n        agent.processMessage(message),\n      ),\n    );\n    return responses;\n  }\n\n  async coordinate(agents: string[], task: Task) {\n    // Coordinate multiple agents on a task\n    const selectedAgents = agents.map((id) => this.agents.get(id));\n\n    return await this.executeCoordinatedTask(selectedAgents, task);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"character-management",children:"Character Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Validate character before loading\nfunction validateCharacter(character: Character) {\n  if (!character.name) {\n    throw new Error("Character must have a name");\n  }\n\n  if (!character.modelProvider) {\n    throw new Error("Model provider must be specified");\n  }\n}\n\n// Use character versioning\nconst character = {\n  name: "Agent",\n  version: "1.0.0",\n  // ...\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function handleAgentError(error: Error, character: Character) {\n  // Log error with context\n  console.error(`Agent ${character.name} error:`, error);\n\n  // Attempt recovery\n  if (error.code === "TOKEN_EXPIRED") {\n    await refreshToken(character);\n  }\n\n  // Notify monitoring\n  await notify({\n    level: "error",\n    character: character.name,\n    error,\n  });\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class ResourceManager {\n  async cleanup() {\n    // Close database connections\n    await this.db.close();\n\n    // Shutdown clients\n    await Promise.all(this.clients.map((client) => client.stop()));\n\n    // Clear caches\n    this.cache.clear();\n  }\n\n  async monitor() {\n    // Monitor resource usage\n    const usage = process.memoryUsage();\n    if (usage.heapUsed > threshold) {\n      await this.cleanup();\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Character Loading Failures"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'try {\n  await loadCharacters(charactersArg);\n} catch (error) {\n  if (error.code === "ENOENT") {\n    console.error("Character file not found");\n  } else if (error instanceof SyntaxError) {\n    console.error("Invalid character JSON");\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Client Initialization Errors"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function handleClientError(error: Error) {\n  if (error.message.includes("rate limit")) {\n    await wait(exponentialBackoff());\n  } else if (error.message.includes("auth")) {\n    await refreshAuth();\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Database Connection Issues"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function handleDbError(error: Error) {\n  if (error.message.includes("connection")) {\n    await reconnectDb();\n  } else if (error.message.includes("locked")) {\n    await waitForLock();\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#",children:"Character Creation Guide"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#",children:"Client Configuration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#",children:"Plugin Development"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../packages/agents",children:"Multi-Agent Setup"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},43023:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var r=a(63696);const t={},i=r.createContext(t);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);