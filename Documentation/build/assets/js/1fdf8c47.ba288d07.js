"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[69664],{89995:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"packages/database-adapters","title":"\ud83d\udd27 Database Adapters","description":"Overview","source":"@site/docs/packages/database-adapters.md","sourceDirName":"packages","slug":"/packages/database-adapters","permalink":"/eliza/docs/packages/database-adapters","draft":false,"unlisted":false,"editUrl":"https://github.com/ai16z/eliza/tree/main/docs/docs/packages/database-adapters.md","tags":[],"version":"current","frontMatter":{}}');var r=a(62540),t=a(43023);const i={},l="\ud83d\udd27 Database Adapters",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Available Adapters",id:"available-adapters",level:2},{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"SQLite (Development)",id:"sqlite-development",level:3},{value:"PostgreSQL (Production)",id:"postgresql-production",level:3},{value:"Supabase (Cloud)",id:"supabase-cloud",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Memory Storage",id:"memory-storage",level:3},{value:"Relationships",id:"relationships",level:3},{value:"Goals",id:"goals",level:3},{value:"Common Operations",id:"common-operations",level:2},{value:"Memory Management",id:"memory-management",level:3},{value:"Relationship Management",id:"relationship-management",level:3},{value:"Goal Management",id:"goal-management",level:3},{value:"Vector Search",id:"vector-search",level:2},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Connection Pooling (PostgreSQL)",id:"connection-pooling-postgresql",level:3},{value:"Memory Usage (SQLite)",id:"memory-usage-sqlite",level:3},{value:"Caching (All Adapters)",id:"caching-all-adapters",level:3},{value:"Schema Management",id:"schema-management",level:2},{value:"PostgreSQL Migrations",id:"postgresql-migrations",level:3},{value:"SQLite Schema",id:"sqlite-schema",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Extending Adapters",id:"extending-adapters",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Related Resources",id:"related-resources",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-database-adapters",children:"\ud83d\udd27 Database Adapters"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Database Adapters provide the persistence layer for Eliza, enabling storage and retrieval of memories, relationships, goals, and other core data. The system supports multiple database backends through a unified interface."}),"\n",(0,r.jsx)(n.h2,{id:"available-adapters",children:"Available Adapters"}),"\n",(0,r.jsx)(n.p,{children:"Eliza includes the following database adapters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PostgreSQL Adapter"})," (",(0,r.jsx)(n.code,{children:"@eliza/adapter-postgres"}),") - Production-ready adapter for PostgreSQL databases"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQLite Adapter"})," (",(0,r.jsx)(n.code,{children:"@eliza/adapter-sqlite"}),") - Lightweight adapter for SQLite, perfect for development"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQL.js Adapter"})," (",(0,r.jsx)(n.code,{children:"@eliza/adapter-sqljs"}),") - In-memory SQLite adapter for testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Supabase Adapter"})," (",(0,r.jsx)(n.code,{children:"@eliza/adapter-supabase"}),") - Cloud-native adapter for Supabase"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# PostgreSQL\npnpm add @eliza/adapter-postgres\n\n# SQLite\npnpm add @eliza/adapter-sqlite\n\n# SQL.js\npnpm add @eliza/adapter-sqljs\n\n# Supabase\npnpm add @eliza/adapter-supabase\n"})}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(n.h3,{id:"sqlite-development",children:"SQLite (Development)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { SqliteDatabaseAdapter } from "@eliza/adapter-sqlite";\nimport Database from "better-sqlite3";\n\nconst db = new SqliteDatabaseAdapter(new Database("./dev.db"));\n'})}),"\n",(0,r.jsx)(n.h3,{id:"postgresql-production",children:"PostgreSQL (Production)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { PostgresDatabaseAdapter } from "@eliza/adapter-postgres";\n\nconst db = new PostgresDatabaseAdapter({\n  connectionString: process.env.DATABASE_URL,\n  // Optional connection pool settings\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"supabase-cloud",children:"Supabase (Cloud)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { SupabaseDatabaseAdapter } from "@eliza/adapter-supabase";\n\nconst db = new SupabaseDatabaseAdapter(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_API_KEY,\n);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"memory-storage",children:"Memory Storage"}),"\n",(0,r.jsx)(n.p,{children:"Memories are the fundamental unit of storage in Eliza. They represent messages, documents, and other content with optional embeddings for semantic search."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Memory {\n  id: UUID;\n  content: {\n    text: string;\n    attachments?: Attachment[];\n  };\n  embedding?: number[];\n  userId: UUID;\n  roomId: UUID;\n  agentId: UUID;\n  createdAt: number;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"relationships",children:"Relationships"}),"\n",(0,r.jsx)(n.p,{children:"Relationships track connections between users and agents:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'interface Relationship {\n  userA: UUID;\n  userB: UUID;\n  status: "FRIENDS" | "BLOCKED";\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"goals",children:"Goals"}),"\n",(0,r.jsx)(n.p,{children:"Goals track objectives and their progress:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Goal {\n  id: UUID;\n  roomId: UUID;\n  userId: UUID;\n  name: string;\n  status: GoalStatus;\n  objectives: Objective[];\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"common-operations",children:"Common Operations"}),"\n",(0,r.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Create a memory\nawait db.createMemory(\n  {\n    id: uuid(),\n    content: { text: "Hello world" },\n    userId: user.id,\n    roomId: room.id,\n    agentId: agent.id,\n    createdAt: Date.now(),\n  },\n  "messages",\n);\n\n// Search memories by embedding\nconst similar = await db.searchMemoriesByEmbedding(embedding, {\n  match_threshold: 0.8,\n  count: 10,\n  roomId: room.id,\n});\n\n// Get recent memories\nconst recent = await db.getMemories({\n  roomId: room.id,\n  count: 10,\n  unique: true,\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"relationship-management",children:"Relationship Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create relationship\nawait db.createRelationship({\n  userA: user1.id,\n  userB: user2.id,\n});\n\n// Get relationships for user\nconst relationships = await db.getRelationships({\n  userId: user.id,\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"goal-management",children:"Goal Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Create goal\nawait db.createGoal({\n  id: uuid(),\n  roomId: room.id,\n  userId: user.id,\n  name: "Complete task",\n  status: "IN_PROGRESS",\n  objectives: [],\n});\n\n// Get active goals\nconst goals = await db.getGoals({\n  roomId: room.id,\n  onlyInProgress: true,\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"vector-search",children:"Vector Search"}),"\n",(0,r.jsx)(n.p,{children:"All adapters support vector similarity search for memory retrieval:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Search by embedding vector\nconst memories = await db.searchMemories({\n  tableName: "memories",\n  roomId: room.id,\n  embedding: [0.1, 0.2, ...], // 1536-dimensional vector\n  match_threshold: 0.8,\n  match_count: 10,\n  unique: true\n});\n\n// Get cached embeddings\nconst cached = await db.getCachedEmbeddings({\n  query_table_name: "memories",\n  query_threshold: 0.8,\n  query_input: "search text",\n  query_field_name: "content",\n  query_field_sub_name: "text",\n  query_match_count: 10\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,r.jsx)(n.h3,{id:"connection-pooling-postgresql",children:"Connection Pooling (PostgreSQL)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const db = new PostgresDatabaseAdapter({\n  connectionString: process.env.DATABASE_URL,\n  max: 20, // Maximum pool size\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"memory-usage-sqlite",children:"Memory Usage (SQLite)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const db = new SqliteDatabaseAdapter(\n  new Database("./dev.db", {\n    memory: true, // In-memory database\n    readonly: false,\n    fileMustExist: false,\n  }),\n);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"caching-all-adapters",children:"Caching (All Adapters)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Enable memory caching\nconst memory = new MemoryManager({\n  runtime,\n  tableName: "messages",\n  cacheSize: 1000,\n  cacheTTL: 3600,\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"schema-management",children:"Schema Management"}),"\n",(0,r.jsx)(n.h3,{id:"postgresql-migrations",children:"PostgreSQL Migrations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- migrations/20240318103238_remote_schema.sql\nCREATE TABLE memories (\n  id UUID PRIMARY KEY,\n  type TEXT NOT NULL,\n  content JSONB NOT NULL,\n  embedding vector(1536),\n  "userId" UUID NOT NULL,\n  "roomId" UUID NOT NULL,\n  "agentId" UUID NOT NULL,\n  "unique" BOOLEAN DEFAULT FALSE,\n  "createdAt" TIMESTAMP NOT NULL\n);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sqlite-schema",children:"SQLite Schema"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const sqliteTables = `\nCREATE TABLE IF NOT EXISTS memories (\n  id TEXT PRIMARY KEY,\n  type TEXT NOT NULL,\n  content TEXT NOT NULL,\n  embedding BLOB,\n  userId TEXT NOT NULL,\n  roomId TEXT NOT NULL,\n  agentId TEXT NOT NULL,\n  "unique" INTEGER DEFAULT 0,\n  createdAt INTEGER NOT NULL\n);\n`;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'try {\n  await db.createMemory(memory);\n} catch (error) {\n  if (error.code === "SQLITE_CONSTRAINT") {\n    // Handle unique constraint violation\n  } else if (error.code === "23505") {\n    // Handle Postgres unique violation\n  } else {\n    // Handle other errors\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"extending-adapters",children:"Extending Adapters"}),"\n",(0,r.jsxs)(n.p,{children:["To create a custom adapter, implement the ",(0,r.jsx)(n.code,{children:"DatabaseAdapter"})," interface:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class CustomDatabaseAdapter extends DatabaseAdapter {\n  async createMemory(memory: Memory, tableName: string): Promise<void> {\n    // Custom implementation\n  }\n\n  async getMemories(params: {\n    roomId: UUID;\n    count?: number;\n    unique?: boolean;\n  }): Promise<Memory[]> {\n    // Custom implementation\n  }\n\n  // Implement other required methods...\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Connection Management"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use connection pooling for PostgreSQL"}),"\n",(0,r.jsx)(n.li,{children:"Close connections properly when using SQLite"}),"\n",(0,r.jsx)(n.li,{children:"Handle connection errors gracefully"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Vector Search"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Set appropriate match thresholds based on your use case"}),"\n",(0,r.jsx)(n.li,{children:"Index embedding columns for better performance"}),"\n",(0,r.jsx)(n.li,{children:"Cache frequently accessed embeddings"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Memory Management"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement cleanup strategies for old memories"}),"\n",(0,r.jsx)(n.li,{children:"Use unique flags to prevent duplicates"}),"\n",(0,r.jsx)(n.li,{children:"Consider partitioning large tables"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Error Handling"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement retries for transient failures"}),"\n",(0,r.jsx)(n.li,{children:"Log database errors with context"}),"\n",(0,r.jsx)(n.li,{children:"Use transactions for atomic operations"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Connection Timeouts"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Increase connection timeout\nconst db = new PostgresDatabaseAdapter({\n  connectionTimeoutMillis: 5000,\n});\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Memory Leaks"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Clean up old memories periodically\nawait db.removeAllMemories(roomId, tableName);\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Vector Search Performance"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create appropriate indexes\nCREATE INDEX embedding_idx ON memories\nUSING ivfflat (embedding vector_cosine_ops)\nWITH (lists = 100);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../packages/core",children:"Memory Manager Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../packages/database-adapters",children:"Vector Search Guide"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/api",children:"Database Schema Reference"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},43023:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var s=a(63696);const r={},t=s.createContext(r);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);