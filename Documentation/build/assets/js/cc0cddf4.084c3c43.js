"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[62476],{39751:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Discord/development/coders/chat_2024-11-23","title":"\ud83d\udcbb-coders 2024-11-23","description":"Summary","source":"@site/community/Discord/development/coders/chat_2024-11-23.md","sourceDirName":"Discord/development/coders","slug":"/Discord/development/coders/chat_2024-11-23","permalink":"/eliza/community/Discord/development/coders/chat_2024-11-23","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"\ud83d\udcbb-coders 2024-11-22","permalink":"/eliza/community/Discord/development/coders/chat_2024-11-22"},"next":{"title":"\ud83d\udcbb-coders 2024-11-24","permalink":"/eliza/community/Discord/development/coders/chat_2024-11-24"}}');var s=i(62540),o=i(43023);const r={},l="\ud83d\udcbb-coders 2024-11-23",a={},c=[{value:"Summary",id:"summary",level:2},{value:"FAQ",id:"faq",level:2},{value:"Who Helped Who",id:"who-helped-who",level:2},{value:"Action Items",id:"action-items",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-coders-2024-11-23",children:"\ud83d\udcbb-coders 2024-11-23"})}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(n.p,{children:["In the discussion, jmill advised Lambrino on setting up ",(0,s.jsx)(n.code,{children:"WALLET_PUBLIC_KEY"})," in the environment to load the Solana plugin within an agent script hardcoded into index.ts file of the agent's source code. This setup allows the agent to use plugins like solanaPlugin and coinbaseCommercePlugin, which are conditionally included based on character settings or process.env variables. Lambrino sought clarification on how to format these plugins within an array in their .env file but was guided by jmill not to include anything there. Instead, they were instructed to set the necessary environment variables directly. The conversation also touched upon increasing logging levels and clearing agent memory, with moonboi suggesting that global use might not be applicable for the latter concern. Additionally, Lambrino expressed difficulty in getting their agent to utilize the chain correctly when querying coin prices or opinions, indicating a need for further assistance on this topic."]}),"\n",(0,s.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["What is the correct way to set up ",(0,s.jsx)(n.code,{children:"WALLET_PUBLIC_KEY"})," in .env file?"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["[jmill]: To load the Solana plugin, you need to hardcode ",(0,s.jsx)(n.code,{children:"WALLET_PUBLIC_KEY"})," into your agent script. You don't have to put anything within the ",(0,s.jsx)(n.code,{children:"plugins"})," array; just set ",(0,s.jsx)(n.code,{children:"WALLET_PUBLIC_KEY"})," in your .env file and it will be picked up by the agent runtime."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"How does the agent know to use plugins?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["[jmill]: The agent knows to load plugins based on the configuration provided in the AgentRuntime object, which includes an array of plugin objects under ",(0,s.jsx)(n.code,{children:"plugins"}),". In this case, you can set your Solana and Coinbase Commerce keys as environment variables or hardcode them into the script."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"How do I clear my agents memory?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"[moonboi \ud83c\udf11]: The agent doesn't have a built-in method to clear its memory, but you can try restarting your agent process to reset its state."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Is it necessary to include ",(0,s.jsx)(n.code,{children:"runtime.registerPlugin(solanaPlugin)"})," and where should I include it?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["[jmill]: It is not necessary to manually register the Solana plugin using ",(0,s.jsx)(n.code,{children:"runtime.registerPlugin()"}),". The code snippet provided shows that plugins are loaded automatically based on their configuration in the AgentRuntime object, which includes an array of plugin objects under ",(0,s.jsx)(n.code,{children:"plugins"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"who-helped-who",children:"Who Helped Who"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["jmill helped Lambrino with setting up solana plugin in agent script by suggesting to set ",(0,s.jsx)(n.code,{children:"WALLET_PUBLIC_KEY"}),' in env and providing a code snippet for including plugins. The issue was related to formatting within the "plugins" array, which was resolved successfully.']}),"\n",(0,s.jsxs)(n.li,{children:["AzFlin helped an unnamed user with increasing logging mode to debug by pointing out where they can see debug logs in the code (e.g., ",(0,s.jsx)(n.code,{children:'elizaLogger.debug("generate post prompt:\\n" + context);'}),"). The context of the problem is not fully clear, but it seems related to debugging agent behavior."]}),"\n",(0,s.jsx)(n.li,{children:"moonboi \ud83c\udf11 helped Lambrino by suggesting that the issue with the agent getting caught up on previous stuff might not be a global issue, implying that the problem could lie elsewhere in their setup or usage of the agent."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"action-items",children:"Action Items"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Technical Tasks"}),"\n",(0,s.jsxs)(n.li,{children:["Extract concrete Solana plugin from the agent script and set ",(0,s.jsx)(n.code,{children:"WALLET_PUBLIC_KEY"})," in .env (mentioned by jmill)"]}),"\n",(0,s.jsx)(n.li,{children:"Increase logging to debug mode (requested by AzFlin)"}),"\n",(0,s.jsx)(n.li,{children:"Clear agents memory when it gets caught up on previous stuff (requested by Lambrino)"}),"\n",(0,s.jsx)(n.li,{children:"Ensure the agent uses the chain correctly for price or opinion queries and sends the address accordingly (mentioned by Lambrino)"}),"\n",(0,s.jsx)(n.li,{children:"Determine if runtime.registerPlugin(solanaPlugin); is necessary and where to include it, if so (questioned by Lambrino)"}),"\n",(0,s.jsxs)(n.li,{children:["Documentation Needs","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Provide documentation on how to apply rag (requested by Chiboba)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Feature Requests","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Enable the agent to buy coins using the enabled plugin (mentioned by Lambrino)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Community Tasks","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tagging for availability or assistance with specific questions related to AI agents and Solana plugins (requested by Lambrino)"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},43023:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(63696);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);